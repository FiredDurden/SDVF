// Iniciando o hardware ESP32
void setup() {
// put your setup code here, to run once:
	Serial.begin(115200);
	pinMode(2, INPUT);
	pinMode(34, INPUT);
	pinMode(35, INPUT);
	pinMode(12, OUTPUT);
	digitalWrite(atuador, HIGH);
}

//Função para mudar Atuador
void setAtuador(boolean vazamento) {
	if (!vazamento){
		digitalWrite(atuador, LOW);
		} else {
		digitalWrite(atuador, HIGH);
	}
}
// Função para conectar ao WiFi
void conectaWifi() {

WiFi.begin(WIFI_SSID, WIFI_PASSWORD, WIFI_CHANNEL)
WiFi.mode(WIFI_STA);  // Configura o modo WiFi como estação (não ponto de acesso)
}
// Função para desconectar ao WiFi
void desconectaWifi() {
	WiFi.disconnect();
}
//Função para publicar no MQTT Broker
void publicaMqttBroker(String mqttMensagem) {
	client.setServer(mqtt_broker, mqtt_port);
	client.setCallback(callback);
	while (!client.connected()) {
		String client_id = "esp32-MQTTPublisher";
		client_id += String(WiFi.macAddress());
		if (client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
			} else {
			delay(2000);
			}
	}

    client.publish(topic, mqttMensagem.c_str());
}

void callback(char *topic, byte *payload, unsigned int length) {
	Serial.print("Message arrived in topic: ");
	Serial.println(topic);
	Serial.print("Message:");
	for (int i = 0; i < length; i++) {
		Serial.print((char) payload[i]);
		}
	Serial.println();
	Serial.println("-----------------------");
}


//Função para pegar horário de server NTP
String getDataHora() {
  char buffer[20];
  waitForSync();  
  dadoNTP.setLocation("America/Sao_Paulo");  
  snprintf(buffer, sizeof(buffer), "%02d/%02d/%04d %02d:%02d:%02d",
          dadoNTP.day(), dadoNTP.month(), dadoNTP.year(),
          dadoNTP.hour(), dadoNTP.minute(), dadoNTP.second());
return String(buffer);
}

//Função Loop (principal)
void loop() {
	delay(2000); // espera 2 segundos antes de inciar nova execução
	//Lógica para verificar vazamento
	vazamento = (estadoFornece01 == 1) && (estadoConsome01 == 0) && (estadoConsome02 == 0);

	//Decide se haverá publicação
	if((vazamento != vazamentoMQTT) || (contaCiclo==60)) {
		conectaWifi();
		dataHoraStatus = getDataHora();
		vazamentoMQTT = vazamento;
		setAtuador(vazamentoMQTT);
		statusVazamento = (vazamentoMQTT?"COM VAZAMENTO": "Sem Vazamento");
		if (contaCiclo < 60) {
			motivoAtualiza = "POR EVENTO";
			} else {
			motivoAtualiza = "por periodo";
			contaCiclo = 0;
			}
		mensagem = "\nAtualizado " + motivoAtualiza + " .Status: " + statusVazamento + " .\nData e Hora: " + dataHoraStatus;
		dataHoraPublish= getDataHora();
		publicaMqttBroker(mensagem);
		desconectaWifi();
	}
	contaCiclo = contaCiclo + 1;
}




